[app]
testing = false
secret = 'DEFAULT_CHANGE_ME' # python -c "import secrets as s; print(s.token_hex(24))"
validate_boards_db = true
autoreload = false
api = false # serve catalog.json, thread.json, index.json ?
url = 'http://127.0.0.1:9001' # 'http://127.0.0.1:9001' 'https://192.168.1.100' 'https://ayasequart.com' # everything before the paths/querystrings in your url
port = 9001
# ssl_key = 'key.pem'
# ssl_cert = 'cert.pem'


proxy_trusted_hops = 0

# rate limit endpoints?
# all rates are currently hard coded
# adding configs for each endpoint would be an appreciated contribution
rate_limiter = true


# tells web crawlers if they can crawl your site or not, when they ask
allow_robots = false # robots.txt

# you can change this to increase your security
login_endpoint = '/login'


[site]
name = 'Ayase Quart'
theme = 'tomorrow' # 'tomorrow' 'yotsuba' 'yotsuba_b' 'futaba' 'burichan' 'photon'
site_email = ''
anonymous_username = 'Anonymous'


[archive]
type = 'yotsuba' # 'yotsuba' (4chan), 'vichan' (lainchan, holotower)
canonical_name = '4chan' # '4chan', 'Lainchan', 'Holotower'
canonical_host = 'https://boards.4chan.org'
comments_preescaped = false # false (4chan scrapers), true (vichan APIs)


[stats]
enabled = true # true/false - allow endpoints for users to view [(posts / YYYY-MM) / board]
redis = true
redis_db = 2


[traffic_log]
# if enabled, this will create a sqlite database with insightful traffic fields for every request
# this is unrelated to the hypercorn logging, and is purely application side logging
enabled = true
database = '/path/to/traffic.db'

# do not log URL paths that begin with this,
ignore_path_startswith = ['/srv', '/static', '/favico'] # list
# ignore_path_startswith = '/srv' # string (if singular)


[db]
db_type = 'mysql' # mysql, sqlite, postgresql
echo = false # if true, print rendered sql statements to console

[db.mysql] # follow pymysql/aiomysql connection keys
host = '127.0.0.1'
port = 3306
# unix_socket = '/var/run/mysqld/mysqld.sock'
db = 'asagi'
user = 'asagi'
password = 'asagi'
minsize = 1
maxsize = 50

[db.sqlite] # follow aiosqlite connection keys
database = 'path/to/file.db'
load_sqlite_into_memory = false # this must be false to persist data


[db.postgresql] # follow aiosqlite connection keys
host = 'localhost' # also used for unix domain socket
port = 5432
user = 'asagi'
password = 'asagi'
database = 'asagi'
min_size = 1
max_size = 50


# creates a connection pool per db per process
# db is set per functionality (ex: [moderation])
[redis] # follow coredis connection keys
host = "127.0.0.1"
port = 6379
max_connections = 1000 # ensure max open file is high enough on linux (ulimit)


[media]
# set image_uri or thumb_uri to '' if you don't want any boards to serve image, or thumb media, respectively
image_uri = "https://192.168.1.16:9003/static/ritual/{board}/image" # must contain {board}
thumb_uri = "https://192.168.1.16:9003/static/ritual/{board}/thumb" # must contain {board}

# Below are optional settings for serving media outside the quart app's static path
#       i.e. outside of '/path/to/ayase_quart/src/static'

serve_outside_static = false # true, false

# `media_root_path` is the full path to the root media directory on your server
#       i.e. if you have images like '/mnt/dl/<board>/image' set this to '/mnt/dl'
media_root_path = ''

# only serve files with these extension from outside the static path
valid_extensions = ['jpg', 'jpeg', 'png', 'gif', 'webm', 'mp4']

# `endpoint` serves content from your filesystem at the endpoint /<endpoint>/<board>/image
#       i.e. if you want to serve content from '/srv/media/<board>/image' set this to '/srv/media'
endpoint = '/srv/media'

# If you use this, declare the two URIs like below, and comment out the above URI declarations.
# image_uri = "/<endpoint>/{board}/image" # e.g. "/srv/media/{board}/image"
# thumb_uri = "/<endpoint>/{board}/thumb" # e.g. "/srv/media/{board}/thumb"

# The default is to serve media from all boards [Aside: set image_uri or thumb_url to '' to not serve the images, or thumbs, respectively]
# You can specify a subset of boards with a whitelist
boards_with_image = '' # comma separated list of board shortnames like '' or 'a,o'
boards_with_thumb = '' # comma separated list of board shortnames like '' or 'g,ck,o'

try_full_src_type_on_404 = false # let clients request full src (images only, not videos) if thumbs not found?



[vanilla_search]
enabled = true
highlight = false # highlight results?
hits_per_page = 50
max_hits = 1_000
multi_board_search = false # allow searching multiple boards at once?

# In order to utilize the AQ search form field `file_archived`,
# the tagging module script `src/tagging/tagger.py` needs to be ran at least once.
# It creates a database table called `image` and populates it will all the images you have on your server
# If this config is false, it does not rely on the `image` table, and searching will still work - you just won't
# have the `file_archived` field in your **vanilla** search form.
use_file_archived = true


[index_search]
enabled = true
highlight = false # highlight results?
hits_per_page = 50
max_hits = 1_000
provider = 'lnx' # 'lnx', 'meili', 'manticore', 'typesense', 'quickwit'
host = 'http://localhost:8000' # index search host. It should really be a LAN IP address like '192.168.1.122' - not 'localhost', nor a domain name.
headers = { content-type = 'application/json', Authorization = 'password' }
version = '1' # only matters for quickwit
multi_board_search = true # allow searching multiple boards at once?


# In order to utilize the AQ search form field `file_archived`,
# the tagging module script `src/tagging/tagger.py` needs to be ran at least once.
# It creates a database table called `image` and populates it will all the images you have on your server
# If this config is false, it does not rely on the `image` table, and indexing will still work - you just won't
# have the `file_archived` field in your **index** search form.
use_file_archived = false


[moderation]
enabled = true # true, false

admin_user = 'admin'
admin_password = 'admin'


hide_post_if_reported = true # true, false

# if a post is reported N times from different IPs, then hide it
# 'hide_post_if_reported' takes precedence
n_reports_then_hide = 1


hide_4chan_deleted_posts = true # hide 4chan staff deleted posts in archive
remove_replies_to_hidden_op = true # true, false # If remove_op_replies is true, then replies to hidden OPs are also hidden

filter_cache_type = 'sqlite' # 'sqlite', 'bloom' (not supported yet)

regex_filter = '' # never serve posts matching this regex pattern e.g. 'gentoo|based'
path_to_regex_so = '' # download from https://github.com/asg017/sqlite-regex/releases

# path where hidden images should go
# if empty, images can still be served if their URLs are known
hidden_images_path = '' # e.g. '/home/garbage/disposal'

# Use redis to cache user auth and filter reported posts
# Ensure redis connection is valid (see [redis])
redis = true # true, false.
redis_db = 1 # redis database id

[moderation.sqlite]
database = 'path/to/moderation.db' # path to the moderation database
load_sqlite_into_memory = false # this must be false to persist data

[moderation.auth]
cookie_samesite='Strict'
cookie_secure=false # set this to true when you are using https / are in production
cookie_http_only=true # js does not need to access auth cookies
cookie_name='aq'

cookie_salt='web salt'
bearer_salt='api salt'

cookie_duration=604_800 # one week
bearer_duration=604_800 # one week


[archiveposting]
enabled = true
database = '/home/archiveposting.db'
board_name = 'ayase_quart'
board_desc = '''This is Ayase Quart's text board. Only ascii is permitted.'''
ascii_only = true


[tagging]
enabled = true # true, false

database = '/absolute/path/to/tagging.db' # the tagger has its own database

tag_model_repo_id = 'SmilingWolf/wd-swinv2-tagger-v3' # 'SmilingWolf/wd-convnext-tagger-v3' 'SmilingWolf/wd-vit-tagger-v3'

allow_file_search = true # allow upload of files to search?
exts = ['jpg', 'png', 'jpeg', 'gif'] # no . prefix, file the ext
use_cpu = false # cpu or gpu

max_page_retries = 2 # query the tag database up to <max_page_retries> times, or until <hits_per_page> is reached

load_sqlite_into_memory = true # this must be false to persist data


[vox]
# text to speech module that allows the client to fetch the endpoint
# /<string:board>/thread/<int:thread_id>/vox
# for .wav files to read threads
enabled = false

engine = 'kokoro' # 'kokoro', 'flite'

reader_mode = 'bfs' # 'dfs', 'bfs', 'op', 'op_and_replies_to_op'

allowed_boards = ['g', 'ck']
serve_outside_static = true # true, false

# `vox_root_path` is the full path to the root vox directory on your server
#       i.e. if you have images like '/mnt/dl/<board>/vox' set this to '/mnt/dl'
# .wav/.mp3 files will be generated in the fs structure '/mnt/dl/<board>/vox/<post_num>.wav/.mp3'
vox_root_path = '/home/xx/Documents/code/vox'


## KOKORO #########################
# GPU only, 3GB VRAM needed, amazing voices
# Kokoro is a fastapi service running on the same server as AQ
# Install instructions:
# https://github.com/sky-cake/Kokoro-FastAPI-Debloated

## FLITE ##########################
# CPU only, robotic voices
# Flite is a binary located on the same server as AQ
# Install instructions:
# - https://github.com/festvox/flite
# - https://www.cs.cmu.edu/~awb/festival_demos/general.html
# - http://festvox.org/packed/festival/2.4/voices/
path_to_flite_binary = '/absolute/path/to/flite/bin/flite'
path_to_flite_voices = '/absolute/path/to/flite/voices'

# only supports 1 voice selection so far, the narrator's voice will be used for both voices
voice_narrator = 'MANBOT' # 'SIRI','MANBOT','SOYJAK','FEMBOT','BRITBONG','SANGITA'
voice_anon = 'MANBOT' # 'SIRI','MANBOT','SOYJAK','FEMBOT','BRITBONG','SANGITA'

# You'll need to download the voices/cmu.* files you want to use from http://festvox.org/packed/festival/2.4/voices/
# Here is a mapping. Note I tested the other voices, and these were the best ones.
# MANBOT = "cmu_us_bdl"
# SIRI = "cmu_us_clb"
# SOYJAK = "cmu_us_aew"
# FEMBOT = "cmu_us_slt"
# BRITBONG = "cmu_us_fem"
# SANGITA = "cmu_indic_pan_amp"
###################################